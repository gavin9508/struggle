<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--声明项目描述符遵循哪一个POM模型版本。这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成-->
    <groupId>com.struggle</groupId>
    <!-- 构件的标识符，它和group ID一起唯一标识一个构件。-->
    <artifactId>struggle</artifactId>
    <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
    <version>0.0.1-SNAPSHOT</version>
    <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型 -->
    <!--用于将多个maven项目聚合为一个大的项目packaging的方式为pom.-->
    <packaging>pom</packaging>
    <!--项目的名称, Maven产生的文档用 -->
    <name>struggle</name>
    <!--项目主页的URL, Maven产生的文档用 -->
    <url>https://gitee.com/BuZhouDiao/struggle</url>
    <!-- 项目的详细描述-->
    <description>struggle</description>

    <properties>
        <java.version>1.8</java.version>
        <spring.boot.version>2.7.1</spring.boot.version>
        <maven.plugin.version>3.8.1</maven.plugin.version>
    </properties>

    <!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->
    <modules>
        <module>struggle-note</module>
        <module>struggle-spring</module>
    </modules>

    <!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact
        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 -->
    <dependencyManagement>
        <!--该元素描述了项目相关的所有依赖。 -->
        <dependencies>

        </dependencies>
    </dependencyManagement>

    <!--该元素描述了项目相关的所有依赖。 -->
    <dependencies>

    </dependencies>

    <!--发现依赖和扩展的远程仓库列表。 -->
    <repositories>
        <!--需要连接到远程仓库的信息 -->
        <repository>
            <!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 -->
            <id>aliyun-repos</id>
            <!--远程仓库URL，按protocol://hostname/path形式 -->
            <url>https://maven.aliyun.com/repository/public</url>
            <!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的
               策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。 -->
            <snapshots>
                <!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <!--发现插件的远程仓库列表-->
    <pluginRepositories>
        <!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->
        <pluginRepository>
            <id>aliyun-plugin</id>
            <url>https://maven.aliyun.com/repository/public</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <!--构建项目需要的信息 -->
    <build>
        <!--产生的构件的文件名，默认值是${artifactId}-${version}。 -->
        <finalName>${project.name}</finalName>
        <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 -->
        <resources>
            <!--这个元素描述了项目相关或测试相关的所有资源路径 -->
            <resource>
                <!--描述存放资源的目录，该路径相对POM路径 -->
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <!--包含的模式列表，例如**/*.xml. -->
                <directory>src/main/java</directory>
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>

        <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 -->
        <pluginManagement>
            <!--使用的插件列表 。 -->
            <plugins>
                <!--plugin元素包含描述插件所需要的信息。 -->
                <plugin>
                    <!--插件在仓库里的group ID -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring.boot.version}</version>
                    <configuration>
                        <fork>true</fork>
                        <finalName>${project.build.finalName}</finalName>
                    </configuration>
                    <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->
                    <executions>
                        <execution>
                            <goals>
                                <!--配置的执行目标 -->
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>

        <!--使用的插件列表 -->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                    <compilerArgs>
                        <arg>-parameters</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
